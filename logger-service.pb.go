// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logger-service.proto

package pplogger

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ErrorMessage_Severity int32

const (
	ErrorMessage_NOTHING ErrorMessage_Severity = 0
	ErrorMessage_FATAL   ErrorMessage_Severity = 1
	ErrorMessage_SEVERE  ErrorMessage_Severity = 2
	ErrorMessage_WARNING ErrorMessage_Severity = 3
)

var ErrorMessage_Severity_name = map[int32]string{
	0: "NOTHING",
	1: "FATAL",
	2: "SEVERE",
	3: "WARNING",
}

var ErrorMessage_Severity_value = map[string]int32{
	"NOTHING": 0,
	"FATAL":   1,
	"SEVERE":  2,
	"WARNING": 3,
}

func (x ErrorMessage_Severity) String() string {
	return proto.EnumName(ErrorMessage_Severity_name, int32(x))
}

func (ErrorMessage_Severity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1484f153346fa394, []int{0, 0}
}

type ErrorMessage struct {
	Service              string                `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Function             string                `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	Severity             ErrorMessage_Severity `protobuf:"varint,3,opt,name=severity,proto3,enum=pplogger.ErrorMessage_Severity" json:"severity,omitempty"`
	Message              string                `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ErrorMessage) Reset()         { *m = ErrorMessage{} }
func (m *ErrorMessage) String() string { return proto.CompactTextString(m) }
func (*ErrorMessage) ProtoMessage()    {}
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1484f153346fa394, []int{0}
}

func (m *ErrorMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorMessage.Unmarshal(m, b)
}
func (m *ErrorMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorMessage.Marshal(b, m, deterministic)
}
func (m *ErrorMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorMessage.Merge(m, src)
}
func (m *ErrorMessage) XXX_Size() int {
	return xxx_messageInfo_ErrorMessage.Size(m)
}
func (m *ErrorMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorMessage proto.InternalMessageInfo

func (m *ErrorMessage) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ErrorMessage) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *ErrorMessage) GetSeverity() ErrorMessage_Severity {
	if m != nil {
		return m.Severity
	}
	return ErrorMessage_NOTHING
}

func (m *ErrorMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type StreamErrorsRequest struct {
	Function             string   `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamErrorsRequest) Reset()         { *m = StreamErrorsRequest{} }
func (m *StreamErrorsRequest) String() string { return proto.CompactTextString(m) }
func (*StreamErrorsRequest) ProtoMessage()    {}
func (*StreamErrorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1484f153346fa394, []int{1}
}

func (m *StreamErrorsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamErrorsRequest.Unmarshal(m, b)
}
func (m *StreamErrorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamErrorsRequest.Marshal(b, m, deterministic)
}
func (m *StreamErrorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamErrorsRequest.Merge(m, src)
}
func (m *StreamErrorsRequest) XXX_Size() int {
	return xxx_messageInfo_StreamErrorsRequest.Size(m)
}
func (m *StreamErrorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamErrorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamErrorsRequest proto.InternalMessageInfo

func (m *StreamErrorsRequest) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

type StreamDeviceLogRequest struct {
	DeviceEUI            string   `protobuf:"bytes,1,opt,name=deviceEUI,proto3" json:"deviceEUI,omitempty"`
	StartTime            string   `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamDeviceLogRequest) Reset()         { *m = StreamDeviceLogRequest{} }
func (m *StreamDeviceLogRequest) String() string { return proto.CompactTextString(m) }
func (*StreamDeviceLogRequest) ProtoMessage()    {}
func (*StreamDeviceLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1484f153346fa394, []int{2}
}

func (m *StreamDeviceLogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamDeviceLogRequest.Unmarshal(m, b)
}
func (m *StreamDeviceLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamDeviceLogRequest.Marshal(b, m, deterministic)
}
func (m *StreamDeviceLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamDeviceLogRequest.Merge(m, src)
}
func (m *StreamDeviceLogRequest) XXX_Size() int {
	return xxx_messageInfo_StreamDeviceLogRequest.Size(m)
}
func (m *StreamDeviceLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamDeviceLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamDeviceLogRequest proto.InternalMessageInfo

func (m *StreamDeviceLogRequest) GetDeviceEUI() string {
	if m != nil {
		return m.DeviceEUI
	}
	return ""
}

func (m *StreamDeviceLogRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

type DeviceLogMessage struct {
	User                 string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	DeviceEUI            string   `protobuf:"bytes,2,opt,name=deviceEUI,proto3" json:"deviceEUI,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceLogMessage) Reset()         { *m = DeviceLogMessage{} }
func (m *DeviceLogMessage) String() string { return proto.CompactTextString(m) }
func (*DeviceLogMessage) ProtoMessage()    {}
func (*DeviceLogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1484f153346fa394, []int{3}
}

func (m *DeviceLogMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceLogMessage.Unmarshal(m, b)
}
func (m *DeviceLogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceLogMessage.Marshal(b, m, deterministic)
}
func (m *DeviceLogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceLogMessage.Merge(m, src)
}
func (m *DeviceLogMessage) XXX_Size() int {
	return xxx_messageInfo_DeviceLogMessage.Size(m)
}
func (m *DeviceLogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceLogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceLogMessage proto.InternalMessageInfo

func (m *DeviceLogMessage) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *DeviceLogMessage) GetDeviceEUI() string {
	if m != nil {
		return m.DeviceEUI
	}
	return ""
}

func (m *DeviceLogMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type OpAlarmMessage struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	DeviceEUI            string   `protobuf:"bytes,2,opt,name=deviceEUI,proto3" json:"deviceEUI,omitempty"`
	Timestamp            string   `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AlarmType            string   `protobuf:"bytes,4,opt,name=alarmType,proto3" json:"alarmType,omitempty"`
	Message              string   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpAlarmMessage) Reset()         { *m = OpAlarmMessage{} }
func (m *OpAlarmMessage) String() string { return proto.CompactTextString(m) }
func (*OpAlarmMessage) ProtoMessage()    {}
func (*OpAlarmMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1484f153346fa394, []int{4}
}

func (m *OpAlarmMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpAlarmMessage.Unmarshal(m, b)
}
func (m *OpAlarmMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpAlarmMessage.Marshal(b, m, deterministic)
}
func (m *OpAlarmMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpAlarmMessage.Merge(m, src)
}
func (m *OpAlarmMessage) XXX_Size() int {
	return xxx_messageInfo_OpAlarmMessage.Size(m)
}
func (m *OpAlarmMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OpAlarmMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OpAlarmMessage proto.InternalMessageInfo

func (m *OpAlarmMessage) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *OpAlarmMessage) GetDeviceEUI() string {
	if m != nil {
		return m.DeviceEUI
	}
	return ""
}

func (m *OpAlarmMessage) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *OpAlarmMessage) GetAlarmType() string {
	if m != nil {
		return m.AlarmType
	}
	return ""
}

func (m *OpAlarmMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Response struct {
	Reply                string   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_1484f153346fa394, []int{5}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterEnum("pplogger.ErrorMessage_Severity", ErrorMessage_Severity_name, ErrorMessage_Severity_value)
	proto.RegisterType((*ErrorMessage)(nil), "pplogger.ErrorMessage")
	proto.RegisterType((*StreamErrorsRequest)(nil), "pplogger.StreamErrorsRequest")
	proto.RegisterType((*StreamDeviceLogRequest)(nil), "pplogger.StreamDeviceLogRequest")
	proto.RegisterType((*DeviceLogMessage)(nil), "pplogger.DeviceLogMessage")
	proto.RegisterType((*OpAlarmMessage)(nil), "pplogger.OpAlarmMessage")
	proto.RegisterType((*Response)(nil), "pplogger.Response")
}

func init() { proto.RegisterFile("logger-service.proto", fileDescriptor_1484f153346fa394) }

var fileDescriptor_1484f153346fa394 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x93, 0xa6, 0x75, 0x86, 0x12, 0xa2, 0xa1, 0xaa, 0x2c, 0xab, 0x88, 0xc8, 0xa7, 0x5e,
	0x88, 0xa0, 0x5c, 0x90, 0xca, 0x25, 0x08, 0x03, 0x91, 0x4c, 0x2a, 0xd9, 0x06, 0x6e, 0x48, 0xa6,
	0x0c, 0x96, 0xa5, 0x38, 0x6b, 0x76, 0x37, 0x91, 0xf2, 0x33, 0x7c, 0x17, 0xff, 0xc0, 0x4f, 0xa0,
	0xb5, 0xd7, 0x59, 0xdb, 0x6a, 0xda, 0x9b, 0x77, 0xe6, 0xcd, 0x7b, 0x33, 0x6f, 0x46, 0x86, 0xb3,
	0x15, 0x4b, 0x53, 0xe2, 0x2f, 0x04, 0xf1, 0x6d, 0x76, 0x4b, 0xb3, 0x82, 0x33, 0xc9, 0xd0, 0x2e,
	0x8a, 0x2a, 0xee, 0xfd, 0xb5, 0xe0, 0xd4, 0xe7, 0x9c, 0xf1, 0xcf, 0x24, 0x44, 0x92, 0x12, 0x3a,
	0x70, 0xa2, 0xb1, 0x8e, 0x35, 0xb5, 0x2e, 0x47, 0x61, 0xfd, 0x44, 0x17, 0xec, 0x5f, 0x9b, 0xf5,
	0xad, 0xcc, 0xd8, 0xda, 0xe9, 0x97, 0xa9, 0xfd, 0x1b, 0xaf, 0xc1, 0x16, 0xb4, 0x25, 0x9e, 0xc9,
	0x9d, 0x33, 0x98, 0x5a, 0x97, 0xe3, 0xab, 0xe7, 0xb3, 0x5a, 0x63, 0xd6, 0xe4, 0x9f, 0x45, 0x1a,
	0x16, 0xee, 0x0b, 0x94, 0x64, 0x5e, 0x65, 0x9d, 0xa3, 0x4a, 0x52, 0x3f, 0xbd, 0x6b, 0xb0, 0x6b,
	0x3c, 0x3e, 0x82, 0x93, 0xe5, 0x4d, 0xfc, 0x69, 0xb1, 0xfc, 0x38, 0xe9, 0xe1, 0x08, 0x86, 0x1f,
	0xe6, 0xf1, 0x3c, 0x98, 0x58, 0x08, 0x70, 0x1c, 0xf9, 0x5f, 0xfd, 0xd0, 0x9f, 0xf4, 0x15, 0xe6,
	0xdb, 0x3c, 0x5c, 0x2a, 0xcc, 0xc0, 0x7b, 0x05, 0x4f, 0x23, 0xc9, 0x29, 0xc9, 0x4b, 0x7d, 0x11,
	0xd2, 0xef, 0x0d, 0x09, 0xd9, 0x1a, 0xc3, 0x6a, 0x8f, 0xe1, 0xc5, 0x70, 0x5e, 0x95, 0xbc, 0x27,
	0x35, 0x72, 0xc0, 0xd2, 0xba, 0xea, 0x02, 0x46, 0x3f, 0xcb, 0x98, 0xff, 0x65, 0xa1, 0xcb, 0x4c,
	0x40, 0x65, 0x85, 0x4c, 0xb8, 0x8c, 0xb3, 0x9c, 0xb4, 0x37, 0x26, 0xe0, 0x7d, 0x87, 0xc9, 0x9e,
	0xaf, 0xb6, 0x19, 0xe1, 0x68, 0x23, 0x88, 0x6b, 0xaa, 0xf2, 0xbb, 0xad, 0xd1, 0xef, 0x6a, 0x34,
	0x5c, 0x1a, 0xb4, 0x5d, 0xfa, 0x63, 0xc1, 0xf8, 0xa6, 0x98, 0xaf, 0x12, 0x9e, 0x3f, 0xbc, 0xc5,
	0xfb, 0x45, 0x2e, 0x60, 0x24, 0xb3, 0x9c, 0x84, 0x4c, 0xf2, 0x42, 0xcb, 0x98, 0x80, 0xca, 0x26,
	0x4a, 0x25, 0xde, 0x15, 0xf5, 0xaa, 0x4c, 0xa0, 0xd9, 0xe0, 0xb0, 0xdd, 0xe0, 0x14, 0xec, 0x90,
	0x44, 0xc1, 0xd6, 0x82, 0xf0, 0x0c, 0x86, 0x9c, 0x8a, 0xd5, 0x4e, 0xf7, 0x55, 0x3d, 0xae, 0xfe,
	0xf5, 0xe1, 0x71, 0x50, 0x5e, 0x4b, 0xa4, 0xfb, 0x7c, 0x03, 0x76, 0xc0, 0xd2, 0x72, 0x75, 0x78,
	0x7e, 0xf7, 0x2d, 0xb9, 0x68, 0xe2, 0x35, 0xbf, 0xd7, 0xc3, 0x77, 0x30, 0x0e, 0x58, 0x5a, 0x39,
	0xee, 0x6f, 0x69, 0x2d, 0xd1, 0x35, 0xb8, 0xee, 0x22, 0x0e, 0x70, 0xbc, 0x05, 0x08, 0x58, 0xaa,
	0x4d, 0x45, 0xc7, 0x60, 0xda, 0x3e, 0x1f, 0xa8, 0x5e, 0xc0, 0x69, 0xf3, 0xf2, 0xf0, 0x99, 0x41,
	0xdd, 0x71, 0x91, 0xee, 0x81, 0xf1, 0xbc, 0xde, 0x4b, 0x0b, 0x23, 0x78, 0xd2, 0xb9, 0x48, 0x9c,
	0x76, 0xd9, 0xba, 0xc7, 0xea, 0xde, 0x33, 0xaf, 0x22, 0xfd, 0x71, 0x5c, 0xfe, 0x05, 0x5e, 0xff,
	0x0f, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x86, 0xb4, 0xac, 0x1d, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoggerServiceClient is the client API for LoggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggerServiceClient interface {
	LogError(ctx context.Context, in *ErrorMessage, opts ...grpc.CallOption) (*Response, error)
	LogDeviceEvent(ctx context.Context, in *DeviceLogMessage, opts ...grpc.CallOption) (*Response, error)
	LogOpAlarm(ctx context.Context, in *OpAlarmMessage, opts ...grpc.CallOption) (*Response, error)
	StreamErrors(ctx context.Context, in *StreamErrorsRequest, opts ...grpc.CallOption) (LoggerService_StreamErrorsClient, error)
	StreamDeviceLog(ctx context.Context, in *StreamDeviceLogRequest, opts ...grpc.CallOption) (LoggerService_StreamDeviceLogClient, error)
}

type loggerServiceClient struct {
	cc *grpc.ClientConn
}

func NewLoggerServiceClient(cc *grpc.ClientConn) LoggerServiceClient {
	return &loggerServiceClient{cc}
}

func (c *loggerServiceClient) LogError(ctx context.Context, in *ErrorMessage, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pplogger.LoggerService/LogError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerServiceClient) LogDeviceEvent(ctx context.Context, in *DeviceLogMessage, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pplogger.LoggerService/LogDeviceEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerServiceClient) LogOpAlarm(ctx context.Context, in *OpAlarmMessage, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pplogger.LoggerService/LogOpAlarm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerServiceClient) StreamErrors(ctx context.Context, in *StreamErrorsRequest, opts ...grpc.CallOption) (LoggerService_StreamErrorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LoggerService_serviceDesc.Streams[0], "/pplogger.LoggerService/StreamErrors", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggerServiceStreamErrorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LoggerService_StreamErrorsClient interface {
	Recv() (*ErrorMessage, error)
	grpc.ClientStream
}

type loggerServiceStreamErrorsClient struct {
	grpc.ClientStream
}

func (x *loggerServiceStreamErrorsClient) Recv() (*ErrorMessage, error) {
	m := new(ErrorMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *loggerServiceClient) StreamDeviceLog(ctx context.Context, in *StreamDeviceLogRequest, opts ...grpc.CallOption) (LoggerService_StreamDeviceLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LoggerService_serviceDesc.Streams[1], "/pplogger.LoggerService/StreamDeviceLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggerServiceStreamDeviceLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LoggerService_StreamDeviceLogClient interface {
	Recv() (*DeviceLogMessage, error)
	grpc.ClientStream
}

type loggerServiceStreamDeviceLogClient struct {
	grpc.ClientStream
}

func (x *loggerServiceStreamDeviceLogClient) Recv() (*DeviceLogMessage, error) {
	m := new(DeviceLogMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoggerServiceServer is the server API for LoggerService service.
type LoggerServiceServer interface {
	LogError(context.Context, *ErrorMessage) (*Response, error)
	LogDeviceEvent(context.Context, *DeviceLogMessage) (*Response, error)
	LogOpAlarm(context.Context, *OpAlarmMessage) (*Response, error)
	StreamErrors(*StreamErrorsRequest, LoggerService_StreamErrorsServer) error
	StreamDeviceLog(*StreamDeviceLogRequest, LoggerService_StreamDeviceLogServer) error
}

// UnimplementedLoggerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLoggerServiceServer struct {
}

func (*UnimplementedLoggerServiceServer) LogError(ctx context.Context, req *ErrorMessage) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogError not implemented")
}
func (*UnimplementedLoggerServiceServer) LogDeviceEvent(ctx context.Context, req *DeviceLogMessage) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogDeviceEvent not implemented")
}
func (*UnimplementedLoggerServiceServer) LogOpAlarm(ctx context.Context, req *OpAlarmMessage) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogOpAlarm not implemented")
}
func (*UnimplementedLoggerServiceServer) StreamErrors(req *StreamErrorsRequest, srv LoggerService_StreamErrorsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamErrors not implemented")
}
func (*UnimplementedLoggerServiceServer) StreamDeviceLog(req *StreamDeviceLogRequest, srv LoggerService_StreamDeviceLogServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDeviceLog not implemented")
}

func RegisterLoggerServiceServer(s *grpc.Server, srv LoggerServiceServer) {
	s.RegisterService(&_LoggerService_serviceDesc, srv)
}

func _LoggerService_LogError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServiceServer).LogError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pplogger.LoggerService/LogError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServiceServer).LogError(ctx, req.(*ErrorMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggerService_LogDeviceEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceLogMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServiceServer).LogDeviceEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pplogger.LoggerService/LogDeviceEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServiceServer).LogDeviceEvent(ctx, req.(*DeviceLogMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggerService_LogOpAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpAlarmMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServiceServer).LogOpAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pplogger.LoggerService/LogOpAlarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServiceServer).LogOpAlarm(ctx, req.(*OpAlarmMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggerService_StreamErrors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamErrorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoggerServiceServer).StreamErrors(m, &loggerServiceStreamErrorsServer{stream})
}

type LoggerService_StreamErrorsServer interface {
	Send(*ErrorMessage) error
	grpc.ServerStream
}

type loggerServiceStreamErrorsServer struct {
	grpc.ServerStream
}

func (x *loggerServiceStreamErrorsServer) Send(m *ErrorMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _LoggerService_StreamDeviceLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDeviceLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoggerServiceServer).StreamDeviceLog(m, &loggerServiceStreamDeviceLogServer{stream})
}

type LoggerService_StreamDeviceLogServer interface {
	Send(*DeviceLogMessage) error
	grpc.ServerStream
}

type loggerServiceStreamDeviceLogServer struct {
	grpc.ServerStream
}

func (x *loggerServiceStreamDeviceLogServer) Send(m *DeviceLogMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _LoggerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pplogger.LoggerService",
	HandlerType: (*LoggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogError",
			Handler:    _LoggerService_LogError_Handler,
		},
		{
			MethodName: "LogDeviceEvent",
			Handler:    _LoggerService_LogDeviceEvent_Handler,
		},
		{
			MethodName: "LogOpAlarm",
			Handler:    _LoggerService_LogOpAlarm_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamErrors",
			Handler:       _LoggerService_StreamErrors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamDeviceLog",
			Handler:       _LoggerService_StreamDeviceLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "logger-service.proto",
}
